'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = normalizeHTML;

var _patchAnchorElements = require('./patchAnchorElements');

var _patchAnchorElements2 = _interopRequireDefault(_patchAnchorElements);

var _patchBreakElements = require('./patchBreakElements');

var _patchBreakElements2 = _interopRequireDefault(_patchBreakElements);

var _patchElementInlineStyles = require('./patchElementInlineStyles');

var _patchElementInlineStyles2 = _interopRequireDefault(_patchElementInlineStyles);

var _patchListElements = require('./patchListElements');

var _patchListElements2 = _interopRequireDefault(_patchListElements);

var _patchStyleElements = require('./patchStyleElements');

var _patchStyleElements2 = _interopRequireDefault(_patchStyleElements);

var _patchTableElements = require('./patchTableElements');

var _patchTableElements2 = _interopRequireDefault(_patchTableElements);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BRAILLE_PATTERN_BLANK = '\u2800';

function normalizeHTML(html) {
  var body = null;

  // All space characters will be collapsed. That said, `&nbsp;` should
  // be replace by "\u2800" so we could keep the blank space visible.
  html = html.replace(/(\s*\&nbsp;\s*\&nbsp;\s*)/g, BRAILLE_PATTERN_BLANK);

  var sourceIsPage = /<body[\s>]/i.test(html);

  // Provides a dom node that will not execute scripts
  // https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation.createHTMLDocument
  // https://developer.mozilla.org/en-US/Add-ons/Code_snippets/HTML_to_DOM
  if (typeof document !== 'undefined' && document.implementation && document.implementation.createHTMLDocument) {
    var doc = document.implementation.createHTMLDocument('');
    doc.open();
    doc.write(html);
    doc.close();
    // styles.
    (0, _patchStyleElements2.default)(doc);
    (0, _patchElementInlineStyles2.default)(doc);
    // contents.
    (0, _patchAnchorElements2.default)(doc);
    (0, _patchBreakElements2.default)(doc);
    (0, _patchListElements2.default)(doc);
    (0, _patchTableElements2.default)(doc);
    body = doc.getElementsByTagName('body')[0];

    if (body && sourceIsPage) {
      // Source HTML contains <body />, assumes this to be a complete
      // page HTML. Assume this <body /> may contain the style that indicates
      // page's layout.
      var frag = doc.createElement('html');
      frag.appendChild(body);
      return frag.innerHTML;
    }
  }

  if (!body) {
    // <body /> should alway be generated by doc.
    return 'Unsupported HTML content';
  }

  // HTML snippet only.
  return '<body>' + body.innerHTML + '</body>';
}